#pragma once

#include <sceneObject.h>

// ----------------------------------------------------------------------------------------------
// flags: bit0: not writable, bit1: not readable, bit2: removable
#define DEFINE_PROPERTIES                                                                                                                                             \
    FUNCX(propFSensor_size, "sensorSize", sim_propertytype_float, 0, "Size", "Sensor size")                                                                           \
    FUNCX(propFSensor_forceThresholdEnabled, "forceThresholdEnabled", sim_propertytype_bool, 0, "Force threshold enabled", "")                                        \
    FUNCX(propFSensor_torqueThresholdEnabled, "torqueThresholdEnabled", sim_propertytype_bool, 0, "Torque threshold enabled", "")                                     \
    FUNCX(propFSensor_filterType, "filterType", sim_propertytype_int, 0, "Filter", "Filter type")                                                                     \
    FUNCX(propFSensor_filterSampleSize, "filterSampleSize", sim_propertytype_int, 0, "Filter sample", "Filter sample size")                                           \
    FUNCX(propFSensor_consecutiveViolationsToTrigger, "consecutiveViolationsToTrigger", sim_propertytype_int, 0, "Consecutive violations to trigger", "")             \
    FUNCX(propFSensor_forceThreshold, "forceThreshold", sim_propertytype_float, 0, "Force threshold", "")                                                             \
    FUNCX(propFSensor_torqueThreshold, "torqueThreshold", sim_propertytype_float, 0, "Torque threshold", "")                                                          \
    FUNCX(propFSensor_sensorForce, "sensorForce", sim_propertytype_vector3, sim_propertyinfo_notwritable | sim_propertyinfo_modelhashexclude, "Force", "Measured force vector")                           \
    FUNCX(propFSensor_sensorTorque, "sensorTorque", sim_propertytype_vector3, sim_propertyinfo_notwritable | sim_propertyinfo_modelhashexclude, "Torque", "Measured torque vector")                       \
    FUNCX(propFSensor_sensorAverageForce, "filterSensorForce", sim_propertytype_vector3, sim_propertyinfo_notwritable | sim_propertyinfo_modelhashexclude, "Filtered force", "Filtered force vector")     \
    FUNCX(propFSensor_sensorAverageTorque, "filterSensorTorque", sim_propertytype_vector3, sim_propertyinfo_notwritable | sim_propertyinfo_modelhashexclude, "Filtered torque", "Filtered torque vector") \
    FUNCX(propFSensor_intrinsicError, "intrinsicError", sim_propertytype_pose, sim_propertyinfo_notwritable | sim_propertyinfo_modelhashexclude, "Intrinsic error", "Intrinsic error, generated by some physics engines")

#define FUNCX(name, str, v1, v2, t1, t2) const SProperty name = {str, v1, v2, t1, t2};
DEFINE_PROPERTIES
#undef FUNCX
#define FUNCX(name, str, v1, v2, t1, t2) name,
const std::vector<SProperty> allProps_forceSensor = {DEFINE_PROPERTIES};
#undef FUNCX
#undef DEFINE_PROPERTIES
// ----------------------------------------------------------------------------------------------

class CForceSensor : public CSceneObject
{
  public:
    CForceSensor();
    virtual ~CForceSensor();

    // Following functions are inherited from CSceneObject
    void addSpecializedObjectEventData(CCbor* ev) override;
    CSceneObject* copyYourself() override;
    void removeSceneDependencies() override;
    void scaleObject(double scalingFactor) override;
    void serialize(CSer& ar) override;
    void announceObjectWillBeErased(const CSceneObject* object, bool copyBuffer) override;
    void announceCollectionWillBeErased(int groupID, bool copyBuffer) override;
    void announceCollisionWillBeErased(int collisionID, bool copyBuffer) override;
    void announceDistanceWillBeErased(int distanceID, bool copyBuffer) override;
    void announceIkObjectWillBeErased(int ikGroupID, bool copyBuffer) override;
    void performObjectLoadingMapping(const std::map<int, int>* map, int opType) override;
    void performCollectionLoadingMapping(const std::map<int, int>* map, int opType) override;
    void performCollisionLoadingMapping(const std::map<int, int>* map, int opType) override;
    void performDistanceLoadingMapping(const std::map<int, int>* map, int opType) override;
    void performIkLoadingMapping(const std::map<int, int>* map, int opType) override;
    void performTextureObjectLoadingMapping(const std::map<int, int>* map, int opType) override;
    void performDynMaterialObjectLoadingMapping(const std::map<int, int>* map) override;
    void simulationAboutToStart() override;
    void simulationEnded() override;
    void initializeInitialValues(bool simulationAlreadyRunning) override;
    void computeBoundingBox() override;
    std::string getObjectTypeInfo() const override;
    std::string getObjectTypeInfoExtended() const override;
    bool isPotentiallyCollidable() const override;
    bool isPotentiallyMeasurable() const override;
    bool isPotentiallyDetectable() const override;
    bool isPotentiallyRenderable() const override;
    void setIsInScene(bool s) override;
    int setBoolProperty(const char* pName, bool pState) override;
    int getBoolProperty(const char* pName, bool& pState) const override;
    int setIntProperty(const char* pName, int pState) override;
    int getIntProperty(const char* pName, int& pState) const override;
    int setFloatProperty(const char* pName, double pState) override;
    int getFloatProperty(const char* pName, double& pState) const override;
    int setVector3Property(const char* pName, const C3Vector& pState) override;
    int getVector3Property(const char* pName, C3Vector& pState) const override;
    int setPoseProperty(const char* pName, const C7Vector& pState) override;
    int getPoseProperty(const char* pName, C7Vector& pState) const override;
    int setColorProperty(const char* pName, const float* pState) override;
    int getColorProperty(const char* pName, float* pState) const override;
    int getPropertyName(int& index, std::string& pName, std::string& appartenance) const override;
    static int getPropertyName_static(int& index, std::string& pName, std::string& appartenance);
    int getPropertyInfo(const char* pName, int& info, std::string& infoTxt) const override;
    static int getPropertyInfo_static(const char* pName, int& info, std::string& infoTxt);

    // Overridden from CSceneObject:
    virtual C7Vector getIntrinsicTransformation(bool includeDynErrorComponent, bool* available = nullptr) const;
    virtual C7Vector getFullLocalTransformation() const;

    void commonInit();

    void setIntrinsicTransformationError(const C7Vector& tr);

    void addCumulativeForcesAndTorques(const C3Vector& f, const C3Vector& t, int countForAverage);
    void setForceAndTorqueNotValid();

    bool getDynamicForces(C3Vector& f, bool dynamicStepValue) const;
    bool getDynamicTorques(C3Vector& t, bool dynamicStepValue) const;

    double getDynamicPositionError() const;
    double getDynamicOrientationError() const;
    void getDynamicErrorsFull(C3Vector& linear, C3Vector& angular) const;

    bool getStillAutomaticallyBreaking();
    void setForceThreshold(double t);
    double getForceThreshold() const;
    void setTorqueThreshold(double t);
    double getTorqueThreshold() const;
    void setEnableForceThreshold(bool e);
    bool getEnableForceThreshold() const;
    void setEnableTorqueThreshold(bool e);
    bool getEnableTorqueThreshold() const;
    void setConsecutiveViolationsToTrigger(int count);
    int getConsecutiveViolationsToTrigger() const;

    void setFilterSampleSize(int c);
    int getFilterSampleSize() const;
    void setFilterType(int t);
    int getFilterType() const;

    // Various
    void setForceSensorSize(double s);
    double getForceSensorSize() const;

    CColorObject* getColor(bool part2);

  protected:
    void _setForceAndTorque(bool valid, const C3Vector* f = nullptr, const C3Vector* t = nullptr);
    void _setFilteredForceAndTorque(bool valid, const C3Vector* f = nullptr, const C3Vector* t = nullptr);

    void _computeFilteredValues();
    void _handleSensorTriggering();

    double _forceThreshold;
    double _torqueThreshold;
    int _filterSampleSize;
    int _filterType; // 0=average, 1=median
    bool _forceThresholdEnabled;
    bool _torqueThresholdEnabled;
    bool _stillAutomaticallyBreaking;

    int _consecutiveViolationsToTrigger;
    int _currentThresholdViolationCount;

    C7Vector _intrinsicTransformationError; // from physics engine

    // Variables which need to be serialized & copied
    // Visual attributes:
    double _forceSensorSize;
    CColorObject _color;
    CColorObject _color_removeSoon;

    // Dynamic values:
    std::vector<C3Vector> _cumulatedForces_forFilter; // cumulated over the filter sample size
    std::vector<C3Vector> _cumulatedTorques_forFilter;

    C3Vector _cumulativeForces_duringTimeStep; // cumulated over a time step
    C3Vector _cumulativeTorques_duringTimeStep;

    // Following are forces/torques acquired during a single dyn. calculation step:
    C3Vector _lastForce_dynStep;
    C3Vector _lastTorque_dynStep;
    bool _lastForceAndTorqueValid_dynStep;

    C3Vector _filteredDynamicForces;  // do not serialize! (but initialize appropriately)
    C3Vector _filteredDynamicTorques; // do not serialize! (but initialize appropriately)
    bool _filteredValuesAreValid;

#ifdef SIM_WITH_GUI
  public:
    void display(CViewableBase* renderingObject, int displayAttrib);
#endif
};
